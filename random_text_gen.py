#!/usr/bin/python

"""
# CS 5761 PA 2 - "Random Sentence Generator Based On Ngram Models"
# Author: Ruta Wheelock
# Date: 10/06/2017


# Description
# This program builds unigram, bigram and trigram models of an input text
# and generates random text based on these Ngram models.
# Generated random text demostrates differences between Ngram models.
#
# Unigram model randomly selects words from the text. More common words
#   have higher probability to show up. This model does not consider likelihood of a following
#   word, only the probability of any single word.
# Bigram model looks at word pairs. When a word is given, the next word is selected only from
#   those words that have followed the given word in the input text. This model allows to generate
#   more readable text.
# Trigram model considers three proceeding words. First, it devides the input text in trigrams.
#   When a word is given, the following two are selected from a trigram that was observed
#   in the input text. Random text generated by trigram model might give an insight into the input text.

# The program accepts at least three command line arguments.
# To run the program execute './random_text_gen.py <n> <m> <input-files/s>' in terminal window 
# from the location where this program is saved.
# Replace <n> with 1, 2 or 3 for Ngram model you wish to execute.
#   1 generates unigram, 2 - bigram but 3 - trigram model. 
# Replace <m> with a number of sentences to generate. Only positive integers can be accepted.
# Replace <input-files/s> with at least one input file name.
#   Multiple file names need to be separated by a space.
#   All input files have to be saved in a directory named "texts"
#   Texts directory should be located in the same place where this program.

# Examples
# To generate 3 random senteces from unigrams in texts Anna Karenina, The Idiot and War and Peace execute:
# % ./random_text_gen.py 1 3 karenina.txt theidiot.txt warandpeace.txt
# One of the random senteces could look like this:
#   look , before of faintly of road thought anxious tiny officer as amused re " up , though other , 
#   mother musician stopped set zov rost would make of she he , only it ignorance everything at .
#
# To generate 10 random senteces from bigrams in texts Anna Karenina, The Idiot and War and Peace execute:
# % ./random_text_gen.py 2 10 karenina.txt theidiot.txt warandpeace.txt
# One of the random senteces could look like this:
#   not go away or anything mysterious poetical veil , but he said something quite inconceivable that was 
#   in the right to win a side .
#
# To generate 5 random senteces from trigrams in texts Anna Karenina, The Idiot and War and Peace execute:
# % ./random_text_gen.py 3 5 karenina.txt theidiot.txt warandpeace.txt
# One of the random senteces could look like this:
#   knowing to which was a green tree and trembling with rage , his grandfather , with a tall old bullets in
#   the middle of his troops , to a brilliant young men do ; on behind the earth in which count had gone astray .

"""

import sys
import nltk
import random
from nltk.corpus import PlaintextCorpusReader
    
def main():

    #If the user does not provide enough arguments, display a message and exit with 1
    if (len(sys.argv) < 4):
        print ("Not enough arguments! Please provide ngram model, number of sentences "+ 
                "and at least one input file when executing the program");
        exit(1);

    # Read in arguments and save in variables
    programFile = str(sys.argv[0])
    n_gram = int(sys.argv[1])
    m_sents = int(sys.argv[2])
    numOfArgs = len(sys.argv)

    #define root for input texts
    corpus_root = 'texts/'
    #Use nltk PlaintextCorpusReader to get access to the 'text' folder
    wordlists = PlaintextCorpusReader(corpus_root, '.*')

    #save the first text into context variable
    context = wordlists.words(sys.argv[3])

    #append other texts from input arguments
    for arg in range(4, numOfArgs):
        context = context + wordlists.words(sys.argv[arg])
        
    #Store the size of the corpus in tokenCount
    tokenCount = len(context)

    #convert text to lowercase
    context = [w.lower() for w in context]

    
    #######################
    # START OF A PROGRAM
    #######################
        
    print "\nThis program generates random sentences based on an Ngram model. CS 5761 by Ruta Wheelock.\n"
    print "Command line settings: ",  programFile, n_gram,  m_sents
    print "Length of the corpus: ", tokenCount, " tokens \n"

    
    #--------------------
    # Run Unigram Model
    #--------------------
    if (n_gram == 1):
        print "Executing unigram model: \n"

        # Generate m sentences
        for count in range(m_sents):
            sentence = ''
            while True:
                #Randomly select a word/token from the corpus
                nextWord = context[random.randint(0, tokenCount-1)]
                sentence = sentence +  nextWord + " "
                #If the token is [.!?], print the sentece and break from this loop
                if nextWord == '.' or nextWord == '!' or nextWord == '?':
                    print sentence
                    break

    #-----------------
    #Run Bigram Model
    #-----------------
    elif (n_gram == 2):
        print "Executing bigram model: \n"

        # Save bigrams as tuples in a bigram list
        bigrams = [(context[x], context[x+1]) for x in range(tokenCount-1)]
        
        # Find all bigrams that start with [.!?] and store mathing word in a sentence starter list
        starters = [ x[1] for x in bigrams if x[0] == '.' or x[0] == '!' or x[0] == '?' ]
        startSize = len(starters)

        # Generate m sentences
        for count in range(m_sents):
            #Select seed randomly from the starters list
            seed = starters[random.randint(0, startSize-1)]
            sentence = seed + ' '
            firstWord = seed

            while True:
                #Create a list of words that follow the first word
                nextList = [x[1] for x in bigrams if x[0] == firstWord]
                #Randomly select a word from the nextList
                nextWord = nextList[random.randint(0, len(nextList)-1)]
                #Append the nextWord to the sentence
                sentence = sentence + nextWord + ' '
                firstWord = nextWord
                #If the next word is [.!?] print the sentence and start a new one
                if nextWord == '.' or nextWord == '!' or nextWord == '?':
                    print sentence
                    break
                    
        
    #-----------------
    #Run Trigram Model
    #-----------------
    elif (n_gram == 3):
        print "Executing trigram model: \n"

        # Save trigrams as tuples in a trigram list
        trigrams = [(context[x], context[x+1], context[x+2]) for x in range(tokenCount-2)]
 
        # Find all trigrams that have [.!?] in the first position
        # and store the following word in a sentence starter list
        starters = [ x[1] for x in trigrams if x[0] == '.' or x[0] == '!' or x[0] == '?' ]
        startSize = len(starters)
 
        # Generate m sentences
        for count in range(m_sents):
            #Select seed randomly from starters list
            seed = starters[random.randint(0, startSize-1)]
            sentence = seed + ' '
            firstWord = seed

            while True:
                #Create a list of word pairs that follow the first word
                nextList = [(x[1],x[2]) for x in trigrams if x[0] == firstWord]
                #Randomly select a pair from nextList
                nextWords = nextList[random.randint(0, len(nextList)-1)]

                # If the first word in nextWords pair is not [.!?]
                # Append both words from the pair to the sentence
                # and set the firstWord to be the last word of the nextWords pair
                if nextWords[0] != '.' and nextWords[0] != '!' and nextWords[0] != '?':
                    sentence = sentence + nextWords[0] + ' ' + nextWords[1] + ' '
                    firstWord = nextWords[1]
                    
                #If the last word is [.!?] print the sentence and start a new one
                if nextWords[1] == '.' or nextWords[1] == '!' or nextWords[1] == '?':
                    print sentence
                    break


        
    else:
        print "Sorry!"
        print "Program supports only unigram, bigram and trigram models."
        print "Please use 1 for unigram, 2 for bigram and 3 for trigram as a second command line argument."

        
if __name__ == "__main__":
    main()
